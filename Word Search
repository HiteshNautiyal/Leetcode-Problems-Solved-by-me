class Solution {
    bool search(vector<vector<char>>& board, string word, int i, int j, int n , int m , int k)
    {
        //base case
        if(k >= word.size()) // jab hum saree word ke character traverse krdenge tab return kro
        return true;

        if(i < 0 or i >= n or j < 0 or j >= m or board[i][j] == '.' or word[k] != board[i][j])
        return false;

        if(word.size()==1 and word[k] == board[i][j])
        return true;
        
        //recursive case
        board[i][j] = '.';
        bool temp = false;

        //x & y represent axis like north : 1,0 , south : -1,0 , east : 0,1 , west : 0,-1
        int x[4] = {0,0,-1,1}; 
        int y[4] = {-1,1,0,0};

        for(int index = 0; index < 4; index++)
        {
            temp  = temp || search(board, word, i+x[index], j+y[index], n, m ,k+1); 

        }
        board[i][j] = word[k]; // backtracking means piche aate waqt sb cells ko empty krdo


        return temp;
    }




public:
    bool exist(vector<vector<char>>& board, string word) {
        int n = board.size();
        int m = board[0].size();

        if(n==0 or word.size()==0)
        return false;

        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(word[0] == board[i][j])
                {
                    if(search(board, word, i, j, n ,m, 0))
                    return true;
                }
            }
        }
        return false;
    }
};
